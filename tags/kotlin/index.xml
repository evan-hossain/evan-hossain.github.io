<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kotlin on Evan Hossain</title><link>https://evan-hossain.github.io/tags/kotlin/</link><description>Recent content in kotlin on Evan Hossain</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 Jan 2023 20:05:03 +0000</lastBuildDate><atom:link href="https://evan-hossain.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode: Binary Tree Preorder Traversal in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-binary-tree-preorder-traversal/</link><pubDate>Mon, 09 Jan 2023 20:05:03 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-binary-tree-preorder-traversal/</guid><description>144. Binary Tree Preorder Traversal Given the root of a binary tree, return the preorder traversal of its nodes&amp;rsquo; values.</description></item><item><title>Leetcode: Max Points on a Line in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-max-points-on-a-line/</link><pubDate>Sun, 08 Jan 2023 22:15:27 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-max-points-on-a-line/</guid><description>The basic idea is translating all the points with respect to each point. Then find and count the slope using map of [x/gcd(x,y), y/gcd(x.</description></item><item><title>Learning Vim</title><link>https://evan-hossain.github.io/post/learning-vim/</link><pubDate>Sun, 08 Jan 2023 10:27:42 +0000</pubDate><guid>https://evan-hossain.github.io/post/learning-vim/</guid><description>Like a lot of people, Vim has always been a mystery to me. I never really tried to understand or give it a shot until very recently.</description></item><item><title>Leetcode: Gas Station solution in kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-gas-station/</link><pubDate>Sat, 07 Jan 2023 23:41:20 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-gas-station/</guid><description>class Solution { fun canCompleteCircuit(gas: IntArray, cost: IntArray): Int { val gain = gas.zip(cost).map { it.first - it.second } val gainAppended = gain.</description></item></channel></rss>