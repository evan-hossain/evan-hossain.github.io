<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode on Evan Hossain</title><link>https://evan-hossain.github.io/tags/leetcode/</link><description>Recent content in leetcode on Evan Hossain</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Feb 2023 11:06:01 +0000</lastBuildDate><atom:link href="https://evan-hossain.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode: Shuffle the Array Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-shuffle-the-array/</link><pubDate>Mon, 06 Feb 2023 11:06:01 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-shuffle-the-array/</guid><description>1470. Shuffle the Array Zip the two half lists, flatten.
class Solution { fun shuffle(nums: IntArray, n: Int) = nums.zip( nums.</description></item><item><title>Leetcode: Find All Anagrams in a String Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-find-all-anagrams-in-a-string/</link><pubDate>Mon, 06 Feb 2023 10:58:05 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-find-all-anagrams-in-a-string/</guid><description>438. Find All Anagrams in a String Very similar to this.</description></item><item><title>Leetcode: Permutation in String Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-permutation-in-string/</link><pubDate>Mon, 06 Feb 2023 10:50:50 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-permutation-in-string/</guid><description>567. Permutation in String To verify if a substring in S2 is a permutation of S1, counting the frequency of characters in that substring and comparing them with characters frequency of S1 should do it.</description></item><item><title>Leetcode: Zigzag Conversion Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-zigzag-conversion/</link><pubDate>Mon, 06 Feb 2023 10:46:45 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-zigzag-conversion/</guid><description>6. Zigzag Conversion Create a dummy 2D array, canvas and draw the pattern recursively. Note that the directions only change on the first and last rows.</description></item><item><title>Leetcode: Verifying an Alien Dictionary Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-verifying-an-alien-dictionary/</link><pubDate>Mon, 06 Feb 2023 10:42:15 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-verifying-an-alien-dictionary/</guid><description>953. Verifying an Alien Dictionary Create a map of the unusual indexing of characters, use the map to compare adjacent strings&amp;rsquo; order.</description></item><item><title>Leetcode: Greatest Common Divisor of Strings Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-greatest-common-divisor-of-strings/</link><pubDate>Mon, 06 Feb 2023 10:35:20 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-greatest-common-divisor-of-strings/</guid><description>1071. Greatest Common Divisor of Strings The brute force way would be considering all the prefixes of one of the strings and simulate to see if that is a candidate answer.</description></item><item><title>Leetcode: Best Team With No Conflicts Kotlin solution</title><link>https://evan-hossain.github.io/kotlin/lc-best-team-with-no-conflicts/</link><pubDate>Mon, 06 Feb 2023 10:22:39 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-best-team-with-no-conflicts/</guid><description>1626. Best Team With No Conflicts Since there are two variable values, it&amp;rsquo;ll be easier to work with if we could put them into some kind of order.</description></item><item><title>Leetcode: N Th Tribonacci Number Kotlin Solution</title><link>https://evan-hossain.github.io/kotlin/lc-n-th-tribonacci-number/</link><pubDate>Mon, 06 Feb 2023 10:14:40 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-n-th-tribonacci-number/</guid><description>1137. N-th Tribonacci Number Since each number only depends on the last three numbers, we can pre compute the results in an array and return the results in \({\Omicron(1)}\) for all the queries.</description></item><item><title>Leetcode: Lfu Cache Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-lfu-cache/</link><pubDate>Sun, 29 Jan 2023 11:41:00 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-lfu-cache/</guid><description>460. LFU Cache This problem is pretty much about implementing the requirement. I chose to do it in a more object oriented way.</description></item><item><title>Leetcode: Data Stream as Disjoint Intervals Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-data-stream-as-disjoint-intervals/</link><pubDate>Sat, 28 Jan 2023 12:13:55 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-data-stream-as-disjoint-intervals/</guid><description>352. Data Stream as Disjoint Intervals In this problem, we need to maintain a list of intervals and return the list for each getIntervals() call.</description></item><item><title>Leetcode: Concatenated Words Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-concatenated-words/</link><pubDate>Fri, 27 Jan 2023 20:57:58 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-concatenated-words/</guid><description>472. Concatenated Words The problem basically asks to check which of the given words can be composed by concatenating two or more other words.</description></item><item><title>Leetcode: Maximum Sum Circular Subarray Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-maximum-sum-circular-subarray/</link><pubDate>Sun, 22 Jan 2023 11:39:24 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-maximum-sum-circular-subarray/</guid><description>918. Maximum Sum Circular Subarray The maximum sum problem can be solved using the well known Kadane&amp;rsquo;s algo. But this problem becomes a bit special because of the circular element.</description></item><item><title>Leetcode: Subarray Sums Divisible by K Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-subarray-sums-divisible-by-k/</link><pubDate>Sun, 22 Jan 2023 11:34:44 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-subarray-sums-divisible-by-k/</guid><description>974. Subarray Sums Divisible by K Well known sub-array divisibility problem. Only catch was that the numbers could be negative. So don&amp;rsquo;t forget to handle modulus for negative values.</description></item><item><title>Leetcode: Non Decreasing Subsequences Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-non-decreasing-subsequences/</link><pubDate>Sun, 22 Jan 2023 11:24:05 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-non-decreasing-subsequences/</guid><description>491. Non-decreasing Subsequences Brute force recursive idea works. The only tricky part is handling the situation when there are a group of same digit.</description></item><item><title>Leetcode: Restore Ip Addresses Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-restore-ip-addresses/</link><pubDate>Sun, 22 Jan 2023 11:16:39 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-restore-ip-addresses/</guid><description>93. Restore IP Addresses This problem could be solved in recursive or iterative way. I chose to code in the iterative way.</description></item><item><title>Leetcode: Palindrome Partitioning Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-palindrome-partitioning/</link><pubDate>Sun, 22 Jan 2023 10:26:53 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-palindrome-partitioning/</guid><description>131. Palindrome Partitioning The idea is to recursively partition the given string and check if the newly created partition forms a palindrome.</description></item><item><title>Leetcode: Flip String to Monotone Increasing Kotlin Solution</title><link>https://evan-hossain.github.io/kotlin/lc-flip-string-to-monotone-increasing/</link><pubDate>Tue, 17 Jan 2023 21:51:22 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-flip-string-to-monotone-increasing/</guid><description>926. Flip String to Monotone Increasing At each position, consider two scenarios:
How many digits do we need to change if we want to make everything 0 until this position and everything 1 starting from this index?</description></item><item><title>Leetcode: Number of Good Paths Solution in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-number-of-good-paths/</link><pubDate>Sun, 15 Jan 2023 16:48:41 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-number-of-good-paths/</guid><description>2421. Number of Good Paths Solution I found the problem somewhat harder than typical leetcode problems. My solution idea is as follows:</description></item><item><title>Leetcode: Binary Tree Preorder Traversal in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-binary-tree-preorder-traversal/</link><pubDate>Mon, 09 Jan 2023 20:05:03 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-binary-tree-preorder-traversal/</guid><description>144. Binary Tree Preorder Traversal Given the root of a binary tree, return the preorder traversal of its nodes&amp;rsquo; values.</description></item><item><title>Leetcode: Max Points on a Line in Kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-max-points-on-a-line/</link><pubDate>Sun, 08 Jan 2023 22:15:27 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-max-points-on-a-line/</guid><description>The basic idea is translating all the points with respect to each point. Then find and count the slope using map of [x/gcd(x,y), y/gcd(x.</description></item><item><title>Leetcode: Gas Station solution in kotlin</title><link>https://evan-hossain.github.io/kotlin/lc-gas-station/</link><pubDate>Sat, 07 Jan 2023 23:41:20 +0000</pubDate><guid>https://evan-hossain.github.io/kotlin/lc-gas-station/</guid><description>class Solution { fun canCompleteCircuit(gas: IntArray, cost: IntArray): Int { val gain = gas.zip(cost).map { it.first - it.second } val gainAppended = gain.</description></item></channel></rss>